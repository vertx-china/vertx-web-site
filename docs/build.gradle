import org.apache.commons.codec.digest.DigestUtils

buildscript {
  dependencies {
    classpath "commons-codec:commons-codec:1.15"
  }
}

plugins {
  id 'java'
}

ext {
  versions = [
    "3.9.7",
    "3.9.6",
    "3.9.5",
    "3.9.4",
    "3.9.3",
    "3.9.2",
    "3.9.1",
    "3.9.0",
    "3.8.5",
    "3.8.4",
    "4.0.0",
    "4.0.2",

    // latest version
    "4.0.3"
  ]
}

repositories {
  jcenter()
  maven {
    url "https://oss.sonatype.org/content/repositories/snapshots/"
    mavenContent {
      snapshotsOnly()
    }
  }
}

dependencies {
  implementation("io.vertx:vertx-stack-docs:${versions.last()}:docs@zip") {
    transitive = false
    changing = true
  }
}

def versionToConfiguration(version) {
  return "implementation_${version.replace('.', '_')}"
}

versions.each { configurations.create(versionToConfiguration(it)) }
versions.each {
  dependencies.add(versionToConfiguration(it), "io.vertx:vertx-stack-docs:$it:docs@zip") {
    transitive = false
  }
}

def writeHash(sourceFile, version) {
  def outDir = new File(projectDir, "hashes")
  outDir.mkdirs()
  def outFile = new File(outDir, "${version}.sha")
  outFile.text = new DigestUtils("sha-256").digestAsHex(sourceFile)
}

task extractDocsLatest(type: Sync) {
  dependsOn configurations.runtimeClasspath
  from {
    configurations.runtimeClasspath.collect { zipTree(it) }
  }
  into "$projectDir/extracted"
  configurations.runtimeClasspath.each { writeHash(it, "latest") }
}

task extractDocs {
  dependsOn extractDocsLatest
}

versions.take(versions.size() - 1).each { version ->
  def conf = configurations[versionToConfiguration(version)]
  def t = tasks.create(name: "extractDocs_${version.replace('.', '_')}", type: Sync) {
    dependsOn conf
    from {
      conf.collect { zipTree(it) }
    }
    into "$projectDir/extracted/$version"
    conf.each { writeHash(it, version) }
  }
  extractDocs.dependsOn t
}

task copyApidocs(type: Sync) {
  dependsOn extractDocs
  from "$projectDir/extracted"
  into "$projectDir/../public/docs"
  include "**/apidocs/**"
  includeEmptyDirs false
  preserve {
    include ".gitkeep"
  }
}
// 用来拷贝英文文档到translation目录的，主要是在english分支使用
task copyEnglish(type: Copy) {
  dependsOn extractDocs
  from "$projectDir/extracted"
  into "$projectDir/translation"
  include "**/*.adoc"
  exclude "**/dataobjects.adoc"
  exclude "**/enums.adoc"
  includeEmptyDirs false
}

clean {
  delete "$projectDir/extracted"
  delete copyApidocs.outputs.files.findResults { it.listFiles() }
    .flatten()
    .findAll { it.name != ".gitkeep" }
}
// 复制翻译文档覆盖源文档
task copyTranslationDocs(type: Copy) {
  dependsOn copyApidocs
  from "$projectDir/translation"
  into "$projectDir/extracted"
}

defaultTasks 'extractDocs', 'copyApidocs', 'copyTranslationDocs'
